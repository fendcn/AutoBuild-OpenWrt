name: compile
on:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'ssh-action'
        required: false
        default: 'ssh-actions'

  schedule:
   - cron: 0 0 1 * *

env:
  Github: https://github.com/${{github.repository}}
  Author: ${{github.actor}}
  Apidz: ${{github.repository}}
  Run_number: ${{github.run_number}}
  Run_workflow: ${{github.workflow}}
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
  SCKEY: ${{ secrets.SCKEY }}
  PUSH_PLUS_TOKEN: ${{ secrets.PUSH_PLUS_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  TZ: Asia/Shanghai
  NOT_PUSH: ${{ secrets.NOT_PUSH }}
  envOverride: ${{ github.event.inputs.envOverride }}
  DEVICE: ${{ github.event.client_payload.device || github.event.inputs.device }}
  BRANCH: ${{ github.event.client_payload.branch || github.event.inputs.branch }}

jobs:
  build:
    runs-on: ubuntu-20.04
    if: github.event.repository.owner.id == github.event.sender.id

    name: 编译 "${{matrix.target}}"
    strategy:
      fail-fast: false
      matrix:
        target: [Lede_source]

        # [Lede_source,Lienol_source,Mortal_source,Tianling_source]

    steps:
    - name: 准备完成
      uses: actions/checkout@v2
      with:
          fetch-depth: 1

    - name: 读取设置
      run: |
        source "${GITHUB_WORKSPACE}/build/${{matrix.target}}/settings.ini"
        echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV
        echo "REPO_BRANCH=${REPO_BRANCH}" >> $GITHUB_ENV
        echo "CONFIG_FILE=${CONFIG_FILE}" >> $GITHUB_ENV
        echo "DIY_PART_SH=${DIY_PART_SH}" >> $GITHUB_ENV
        echo "SSH_ACTIONS=${SSH_ACTIONS}" >> $GITHUB_ENV
        echo "UPLOAD_BIN_DIR=${UPLOAD_BIN_DIR}" >> $GITHUB_ENV
        echo "UPLOAD_CONFIG=${UPLOAD_CONFIG}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE=${UPLOAD_FIRMWARE}" >> $GITHUB_ENV
        echo "UPLOAD_COWTRANSFER=${UPLOAD_COWTRANSFER}" >> $GITHUB_ENV
        echo "UPLOAD_RELEASE=${UPLOAD_RELEASE}" >> $GITHUB_ENV
        echo "SERVERCHAN_SCKEY=${SERVERCHAN_SCKEY}" >> $GITHUB_ENV
        echo "REGULAR_UPDATE=${REGULAR_UPDATE}" >> $GITHUB_ENV
        echo "USE_CACHEWRTBUILD=${USE_CACHEWRTBUILD}" >> $GITHUB_ENV
        echo "BY_INFORMATION=${BY_INFORMATION}" >> $GITHUB_ENV
        echo "AUTOMATIC_AMLOGIC=${AUTOMATIC_AMLOGIC}" >> $GITHUB_ENV
        echo "CangKu=${Apidz##*/}" >> $GITHUB_ENV
        echo "Modelfile=${{matrix.target}}" >> $GITHUB_ENV 
        
    - name: 源码版本
      run: |
        chmod -R +x "${GITHUB_WORKSPACE}/build/common"
        if [[ "${REPO_BRANCH}" == "master" ]]; then
          echo "ZZZ=package/lean/default-settings/files/zzz-default-settings" >> $GITHUB_ENV
          echo "CODE=Lede" >> $GITHUB_ENV
          echo "OpenWrt_name=18.06" >> $GITHUB_ENV
        elif [[ "${REPO_BRANCH}" == "19.07" ]]; then
          echo "ZZZ=package/default-settings/files/zzz-default-settings" >> $GITHUB_ENV
          echo "CODE=Lienol" >> $GITHUB_ENV
          echo "OpenWrt_name=19.07" >> $GITHUB_ENV
        elif [[ "${REPO_BRANCH}" == "openwrt-18.06" ]]; then
          echo "ZZZ=package/emortal/default-settings/files/zzz-default-settings" >> $GITHUB_ENV
          echo "CODE=Mortal" >> $GITHUB_ENV
          echo "OpenWrt_name=18.06" >> $GITHUB_ENV
        fi
        echo "NETIP=package/base-files/files/etc/networkip" >> $GITHUB_ENV
        echo "DELETE=package/base-files/files/etc/deletefile" >> $GITHUB_ENV
        if [ -n "$(ls -A build/common/1022gg 2>/dev/null)" ]; then
          source build/common/common.sh && Diy_gonggao
        fi

    - name: 部署环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        nohup sh -c '
        sudo apt update;
        sudo apt -y --no-upgrade --no-install-recommends install pv jq \
        ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
        bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
        git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \
        libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \
        mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip qemu-utils \
        rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android/sdk
        sudo sysctl vm.swappiness=0
        ' &
        sudo -E git config --global user.name 'GitHub Actions' && git config --global user.email 'noreply@github.com'
      
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /${{matrix.target}}
        sudo chown $USER:$GROUPS /${{matrix.target}}
    
    - name: 下载源码
      working-directory: /${{matrix.target}}
      run: |
        git clone -b "$REPO_BRANCH" --single-branch "$REPO_URL" openwrt
        cd openwrt
        ./scripts/feeds update -a > /dev/null 2>&1
        ln -sf /${{matrix.target}}/openwrt $GITHUB_WORKSPACE/openwrt
        echo "Home=${GITHUB_WORKSPACE}/openwrt" >> $GITHUB_ENV
        echo "PATH1=${GITHUB_WORKSPACE}/openwrt/build/${{matrix.target}}" >> $GITHUB_ENV
        cd
          curl -sL https://raw.githubusercontent.com/waynesg/AutoBuild-OpenWrt/zstd-bin/zstd | sudo tee /usr/bin/zstd > /dev/null
        for i in {1..20}
        do
        curl -sL --fail https://github.com/waynesg/cache-build/releases/download/cache/lede.$DEVICE.img.zst.0$i || break
        done | zstdmt -d -o lede.img || (truncate -s 33g lede.img && mkfs.btrfs -M lede.img)
        LOOP_DEVICE=$(losetup -f) && echo "LOOP_DEVICE=$LOOP_DEVICE" >> $GITHUB_ENV
        sudo losetup -P --direct-io $LOOP_DEVICE lede.img
        mkdir openwrt && sudo mount -o nossd,compress=zstd $LOOP_DEVICE openwrt
 
    - name: 加载设置
      run: |
        echo "Compile_Date=$(date +%Y%m%d%H%M)" >> $GITHUB_ENV
        cp -Rf `find ./ -maxdepth 1 -type d ! -path './openwrt' ! -path './'` openwrt
        mv -f "${Home}"/build/common/*.sh "${PATH1}"
        source "${PATH1}/common.sh" && Diy_settings
        [[ "${{ github.event.inputs.ssh }}" == 'ssh' ]] && echo "SSHYC=true" >> $GITHUB_ENV
        cd openwrt
        if [[ "${REPO_BRANCH}" == "master" ]]; then
          source "${PATH1}/common.sh" && Diy_lede
        elif [[ "${REPO_BRANCH}" == "19.07" ]]; then
          source "${PATH1}/common.sh" && Diy_lienol
        elif [[ "${REPO_BRANCH}" == "openwrt-18.06" ]]; then
          source "${PATH1}/common.sh" && Diy_Tianling
        elif [[ "${REPO_BRANCH}" == "openwrt-21.02" ]]; then
          source "${PATH1}/common.sh" && Diy_mortal
        fi
        source "${PATH1}/common.sh" && Diy_all
        /bin/bash "${PATH1}/$DIY_PART_SH"
        ./scripts/feeds update -a
        ./scripts/feeds install -a > /dev/null 2>&1
        ./scripts/feeds install -a
        mv "$PATH1/$CONFIG_FILE" .config
        if [[ "${REGULAR_UPDATE}" == "true" ]]; then
          source "${PATH1}/upgrade.sh" && Diy_Part1
        fi
        
    - name: SSH连接
      uses: danshui-git/debugger-action@master
      if: env.SSH_ACTIONS == 'true' || (github.event.inputs.ssh == 'ssh' && github.event.inputs.ssh  != 'false')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: 生成配置
      run: |
        cd openwrt && rm -rf .tmp/
        source "${PATH1}/common.sh" && Diy_chajian > /dev/null 2>&1
        cat "${Home}"/x86.config.seed "${Home}"/common.seed | sed 's/\(CONFIG_PACKAGE_luci-app-[^A-Z]*=\)y/\1m/' > .config
        find package/ -type d -name luci-app-* | rev | cut -d'/' -f1 | rev | xargs -n1 -i echo CONFIG_PACKAGE_{}=m >> .config
        cat more_luci.txt >> .config
        make defconfig && sed -i -E 's/# (CONFIG_.*_COMPRESS_UPX) is not set/\1=y/' .config && make defconfig
        cat .config
       
    - name: 编译信息
      run: |
        wget -qO- --no-check-certificate https://raw.githubusercontent.com/waynesg/scripts/main/serverbench.sh | bash
        cd openwrt
        source "${PATH1}/common.sh" && Diy_chuli > /dev/null 2>&1
        if [ "${REGULAR_UPDATE}" == "true" ]; then
          source "${PATH1}/upgrade.sh" && Diy_Part2 > /dev/null 2>&1
        fi
        if [ "${BY_INFORMATION}" == "true" ]; then
          source "${PATH1}/upgrade.sh" && GET_TARGET_INFO
          source "${PATH1}/common.sh" && Diy_xinxi
          chmod -R 755 .
        fi

    - name: 下载dl库
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
    
    - name: 开始通知
      if: env.PUSH_PLUS_TOKEN && env.SERVERCHAN_SCKEY == 'PUSH' || env.TELEGRAM_BOT_TOKEN && env.SERVERCHAN_SCKEY == 'TELE'
      run: |
        echo `date +'%Y-%m-%d %H:%M:%S'` > runtime.log
        starttime=$(echo `date +'%Y-%m-%d %H:%M:%S'`)
        if [[ "${SERVERCHAN_SCKEY}" == "TELE" ]]; then
          curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=🎉 主人：您正在使用【${{matrix.target}}】文件夹编译固件中(${{env.CangKu}}仓库的#${{env.Run_number}}号),请耐心等待...... 😋" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"
        elif [[ "${SERVERCHAN_SCKEY}" == "PUSH" ]]; then
          curl -k --data token="${{ secrets.PUSH_PLUS_TOKEN }}" --data title="🎉开始编译" --data "content=🎉正在使用【${{matrix.target}}】文件夹编译固件中(${{env.CangKu}}仓库的#${{env.Run_number}}号),请您耐心等待...... 😋💐" "http://www.pushplus.plus/send"
        fi
        
    - name: Clean build cache
      if: ${{ github.event.client_payload.package_clean == 'true' || github.event.inputs.device != '' }}
      run: |
        cd ~/openwrt
        df -h .
        make package/clean
        df -h .
        
    - name: 编译固件
      id: compile
      timeout-minutes: 1440
      run: |
        ulimit -SHn 65000
        cd openwrt
        while true; do make download -j && break || true; done
        make -j$[`nproc`+1] IGNORE_ERRORS=1
        if [ ! -e ~/openwrt/bin/targets/*/*/*imagebuilder*xz ]; then make V=sc; fi
        mv `ls ~/openwrt/bin/targets/*/*/*imagebuilder*xz` ~/ib-$DEVICE.tar.xz

        echo "======================="
        echo "Space usage:"
        echo "======================="
        df -h
        echo "======================="
        du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
        du -h --max-depth=1 ./build_dir
        du -h --max-depth=1 ./bin
        
    - name: Clean build cache
      if: ${{ github.event.client_payload.package_clean == 'true' }}
      run: |
        cd ~/openwrt
        df -h .
        make package/clean
        df -h .
        
    - name: 上传配置
      if: env.UPLOAD_CONFIG == 'true'
      uses: actions/upload-artifact@v2
      with:
        name: .config_${{ env.CODE }}_${{ env.TARGET_PROFILE }}_${{ env.Compile_Date }}
        path: config.txt
        
    - name: 上传文件
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      uses: actions/upload-artifact@v2
      with:
        name: filename+ipk_${{ env.CODE }}_${{ env.TARGET_PROFILE }}_${{ env.Compile_Date }}
        path: openwrt/bin
    
    - name: 整理固件
      id: organizer
      run: |
        if [ "${AUTOMATIC_AMLOGIC}" == "true" ]; then
          source "${PATH1}/common.sh" && Diy_amlogic
        fi
        cd openwrt
        cp -Rf bin/targets/*/* "${Home}"/upgrade
        cd bin/targets/*/*
        find -name "*buildinfo*" | xargs -i rm -rf {}
        find -name "*sha256sums*" | xargs -i rm -rf {}
        find -name "*manifest*" | xargs -i rm -rf {}
        find -name "*vmlinuz*" | xargs -i rm -rf {}
        find -name "*Image*" | xargs -i rm -rf {}
        find -name "*rootfs*" | xargs -i rm -rf {}
        find -name "*efi.img*" | xargs -i rm -rf {}
        find -name "*kernel*" | xargs -i rm -rf {}
        rm -rf packages
        rename -v "s/^openwrt/${{ env.date1 }}-${{ env.CODE }}/" *
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "BOT=TRUE" >> $GITHUB_ENV
        echo "::set-output name=status::success"
        
    - name: Save cache state
      run: |
        cd
        sleep 60
        sudo mount -o remount,compress=no,nodatacow,nodatasum lede
        cd openwrt/; pv /dev/zero > zerospace || true; sync; rm -f zerospace; cd -
        sleep 60
        sudo umount openwrt
        sudo losetup -d $LOOP_DEVICE
        export AUTH="Authorization: token ${{ secrets.workflow_token }}"
        export cache_path='github.com/repos/waynesg/cache-build/releases'
        export cache_repo_id='69793110'
        zstdmt -c --long lede.img | split --numeric=1 -b 2000m - lede.$DEVICE.img.zst.
        while true; do
        ret=$(curl -sH "$AUTH" "https://api.$cache_path/tags/cache")
        echo $ret | jq -r '.assets[] | select(.name | contains ("'$DEVICE'.img")).id' | \
        xargs -n1 -i curl -X DELETE -H "$AUTH" "https://api.$cache_path/assets/{}"
        echo $ret | jq -r '.assets[] | select(.name == "ib-'$DEVICE'.tar.xz").id' | \
        xargs -n1 -i curl -X DELETE -H "$AUTH" "https://api.$cache_path/assets/{}"
        ls *img.zst* ib-$DEVICE.tar.xz | parallel --wc 'while true; do curl -T {} -H "$AUTH" -H "Content-Type: application/octet-stream" "https://uploads.$cache_path/$cache_repo_id/assets?name={}" && break || true; done'
        set +e
        for i in {1..20}; do curl -sL --fail https://github.com/waynesg/cache-build/releases/download/cache/lede.$DEVICE.img.zst.0$i || break; done | zstdmt -d -o /dev/null
        if [ $? -eq 0 ]; then break; fi
        done
        set -e
        
    - name: 上传固件
      if: steps.organizer.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true'
      uses: actions/upload-artifact@main
      with:
        name: ${{ env.OpenWrt_name }}-${{ env.CODE }}-${{ env.TARGET_PROFILE }}-firmware-${{ env.Compile_Date }}
        path: ${{ env.FIRMWARE }}
          
    - name: 发布信息
      if: steps.organizer.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true'
      run: |
        echo "### $(date +"%Y年%m月%d号-%H点%M分")" > update_log.txt
 
    - name: 发布固件
      if: steps.organizer.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && env.REPO_TOKEN
      uses: ncipollo/release-action@v1
      with:
        name: ${{ env.CODE }}-${{ env.TARGET_PROFILE }}
        tag: ${{ env.date }}
        token: ${{ secrets.REPO_TOKEN }}
        bodyFile: "update_log.txt"
        artifacts: "${{ env.FIRMWARE }}/*"
        
    - name: 更新Step 1
      if: steps.compile.outputs.status == 'success' && env.REGULAR_UPDATE == 'true'
      run: |
       cd openwrt
       source "${PATH1}/upgrade.sh" && Diy_Part3
        
    - name: 更新Step 2
      if: steps.compile.outputs.status == 'success' && env.REGULAR_UPDATE == 'true' && env.REPO_TOKEN
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.REPO_TOKEN }}
        file: openwrt/bin/Firmware/*
        tag: AutoUpdate
        overwrite: true
        file_glob: true
        
    - name: 更新Step 3
      if: steps.compile.outputs.status == 'success' && env.REGULAR_UPDATE == 'true'
      run: |
        mkdir -p Github_Tags
        cd Github_Tags
        wget -q --no-cookie --no-check-certificate https://api.github.com/repos/${{github.repository}}/releases/tags/AutoUpdate -O Github_Tags
        
    - name: 更新Step 4
      if: steps.compile.outputs.status == 'success' && env.REGULAR_UPDATE == 'true' && env.REPO_TOKEN
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.REPO_TOKEN }}
        file: Github_Tags/*
        tag: AutoUpdate
        overwrite: true
        file_glob: true
        
    - name: 完成通知
      if: steps.compile.outputs.status == 'success' && env.PUSH_PLUS_TOKEN && env.SERVERCHAN_SCKEY == 'PUSH' || steps.compile.outputs.status == 'success' && env.TELEGRAM_BOT_TOKEN && env.SERVERCHAN_SCKEY == 'TELE'
      run: |
        if [[ "${SERVERCHAN_SCKEY}" == "TELE" ]]; then
          curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=✨Congratulations✨：您使用【${{matrix.target}}】文件夹编译的[${{ env.CODE }}-${{ env.TARGET_PROFILE }}]固件(${{env.CangKu}}仓库的#${{env.Run_number}}号)顺利编译完成了！💐" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"
        elif [[ "${SERVERCHAN_SCKEY}" == "PUSH" ]]; then
          curl -k --data token="${{ secrets.PUSH_PLUS_TOKEN }}" --data title="[${{ env.CODE }}-${{ env.TARGET_PROFILE }}]编译成功" --data "content=✨Congratulations✨：您使用【${{matrix.target}}】文件夹编译的[${{ env.CODE }}-${{ env.TARGET_PROFILE }}]固件(${{env.CangKu}}仓库的#${{env.Run_number}}号)顺利编译完成了！💐" "http://www.pushplus.plus/send"
        fi

    - name: 清理脚本
      uses: GitRML/delete-workflow-runs@main
      continue-on-error: true
      with:
        retain_days: 40
        keep_minimum_runs: 1
        
    - name: 清理固件
      uses: dev-drprasad/delete-older-releases@master
      continue-on-error: true
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
